{"version":3,"sources":["assets/loader.gif","components/SeriesList/index.js","components/Loader/index.js","components/Intro/index.js","Containers/Series/index.js","Containers/SingleSerie/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","react_router_dom","to","concat","show","id","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","Loader","style","width","alt","src","loadergif","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","_this$state","this","components_Intro","type","onChange","length","components_Loader","components_SeriesList","Component","SingleSerie","series_detail","_this2","match","params","api_url","language","premiered","rating","average","genres","image","medium","Main","react_router","exact","path","component","App","components_Main","React","Boolean","window","location","hostname","Date","toDateString","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b130200.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.07f010bd.gif\";","import React from 'react';\nimport  './series-list.css';\nimport { Link } from 'react-router-dom';\n\nconst SeriesListItem = ({ series }) => (\n    <li >\n        <Link to={ `/series/${ series.show.id }` } > \n            { series.show.name }\n        </Link>\n    </li>\n)\n\nconst SeriesList = (props) => {\n    return (\n        <div>\n            <ul className=\"series-list\">\n            { props.list.map( series => (\n                 <SeriesListItem series={ series } key={series.show.id} />\n            )) }\n            </ul>\n        </div>        \n    )\n}\n\nexport default SeriesList;","import React from 'react';\nimport loadergif from '../../assets/loader.gif'\n\nconst Loader = props => (\n    <div>\n        <img style={ {width: 70} }\n            alt=\"Loading...\"\n            src={ loadergif } />\n    </div>\n);\n\nexport default Loader;","import React from 'react';\n\nconst Intro = props => (\n    <p>\n        { props.message }\n    </p>\n)\n\nexport default Intro","import React, { Component } from \"react\";\nimport SeriesList from '../../components/SeriesList';\nimport Loader from '../../components/Loader';\nimport Intro from '../../components/Intro'\n\nclass Series extends Component {\n    state = {\n        series: [],\n        seriesName: '',\n        isFetching: false\n    }\n\n    onSeriesInputChange = e => {\n        this.setState({ seriesName: e.target.value, isFetching: true });\n        let api_url = \"http://api.tvmaze.com/search/shows?q=\";\n        fetch(api_url + this.state.seriesName)\n            .then( (response) => response.json() )\n            .then( json => this.setState( { series: json, isFetching: false } ) )\n    }\n\n    render() {\n        const { series, seriesName, isFetching } = this.state\n        return (\n            <div>\n                <Intro message=\"My favorites Series Tv in one place... Joubits!\" />\n                <div>\n                    <input value={ seriesName } \n                    type=\"text\" \n                    onChange={ this.onSeriesInputChange }/>\n                </div>\n                {\n                    !isFetching && series.length === 0 && seriesName === ''\n                    &&\n                    <p>Please enter series name into the Input </p>\n                }\n                {\n                    !isFetching && series.length === 0 && seriesName !== ''\n                    &&\n                    <p>No found Tv Series with this series Name </p>\n                }\n\n                {\n                    isFetching && <Loader />\n                }\n\n                {\n                   !isFetching && <SeriesList list={this.state.series} />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Series;","import React, { Component } from 'react';\nimport Loader from '../../components/Loader';\n\nclass SingleSerie extends Component {\n    state = {\n        series_detail: null\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        let api_url = `http://api.tvmaze.com/shows/${ id }?embed=episodes`;\n        fetch(api_url)\n            .then( (response) => response.json() )\n            .then( json => this.setState( { series_detail: json } ) )\n    }\n\n    render() {\n        const { series_detail } = this.state;\n        //console.log(series_detail);\n\n        return(\n            <div>\n                <h3>TV Series Details</h3>\n                {\n                    (series_detail === null) && <Loader />\n                }\n                {\n                    series_detail!==null \n                    &&\n                    <div>\n                        <p>{ series_detail.name }</p>\n                        <p>Original Language: { series_detail.language }</p>\n                        <p>Premiered: { series_detail.premiered }</p>\n                        <p>Rating: { series_detail.rating.average }</p>\n                        { <p>Main Gender: { series_detail.genres[0] }</p> }\n\n                        <img alt=\"SeriesDetailsImage\" src={ series_detail.image.medium } />\n\n                    </div>\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default  SingleSerie;","//use routes here\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Series from '../../Containers/Series';\nimport SingleSerie from '../../Containers/SingleSerie'\n\n\nconst Main = props => (\n    <Switch>\n        <Route exact path=\"/\" component={ Series } />\n        <Route path=\"/series/:id\" component={ SingleSerie } />\n\n    </Switch>\n);\n\nexport default Main;\n","import React from 'react';\nimport Main from '../Main';\nimport './App.css';\nimport 'whatwg-fetch';\n\n\nclass App extends React.Component {\n\n  state = {\n    series: []\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tv Series List</h1>\n        <Main />\n      </header>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n//get Date\nconst getCurrentDate = () => {\n    const date = new Date();\n    return date.toDateString();\n}\n\n//const greeting = React.createElement('h1',{}, 'Hello world to my love!!');\nconst greeting = <h1>Hello World for my love... What time is it? { getCurrentDate() }</h1>;\nReactDOM.render(\n    <BrowserRouter><App /></BrowserRouter>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}